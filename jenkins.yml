# vim: ft=ansible
---
########################
# Deploy Jenkins Master
########################
- hosts: jenkins_master
  tags:
    - jenkins_master

  vars_files:
    - "{{ inventory_dir  }}/../vars/main.yml"
    - ~/.ansible/vars/cira_vars.yml

  roles:
    - { role: 'franklinkim.sudo' }
    - { role: 'geerlingguy.nginx' }
    - { role: 'leifmadsen.jenkins' }

  vars:
    sudo_defaults:
      - defaults: '!requiretty'

  tasks:
    - name: Set facts for later use
      set_fact:
        jenkins_jar_location: "{{ jenkins_jar_location }}"
        jenkins_hostname: "{{ jenkins_hostname }}"
        jenkins_http_port: "{{ jenkins_http_port }}"
        jenkins_url_prefix: "{{ jenkins_url_prefix }}"
        jenkins_admin_username: "{{ jenkins_admin_username }}"
        jenkins_admin_password: "{{ jenkins_admin_password }}"

  post_tasks:
    # Operating system configuration and setup
    - name: Add jenkins user to wheel group
      user:
        name: jenkins
        home: /var/lib/jenkins
        groups: wheel
        append: yes
        shell: /bin/bash

    - name: Update ownership and perms for shadow
      file:
        group: wheel
        mode: "0040"
        path: /etc/shadow

    - name: Create admin user in system
      user:
        name: "{{ jenkins_admin_username }}"
        password: "{{ jenkins_admin_password |password_hash('sha512')}}"
        shell: /bin/bash

    - name: Validate SELinux is enabled
      selinux:
        policy: targeted
        state: enforcing

    - name: SELinux -- Enable httpd_can_network_connect
      seboolean:
        name: httpd_can_network_connect
        state: yes
        persistent: yes

    # Copy in configuration for Nginx web proxy fronting Jenkins web UI
    - name: Copy Jenkins Nginx Configuration
      template:
        src: jenkins_master-vhost.conf.j2
        dest: /etc/nginx/conf.d/jenkins_master.conf
        owner: root
        group: root
        mode: "0644"
      notify: restart nginx

    - name: Automate jenkins configuration
      template:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
        owner: "{{item.owner}}"
        group: "{{item.group}}"
        mode: "{{item.mode}}"
      notify: restart jenkins
      with_items:
        - src: jenkins_config/config.xml.j2
          dest: /var/lib/jenkins/config.xml
          owner: jenkins
          group: jenkins
          mode: "0644"
        - src: jenkins_config/credentials.xml.j2
          dest: /var/lib/jenkins/credentials.xml
          owner: jenkins
          group: jenkins
          mode: "0644"
        - src: jenkins_config/be.certipost.hudson.plugin.SCPRepositoryPublisher.xml.j2
          dest: /var/lib/jenkins/be.certipost.hudson.plugin.SCPRepositoryPublisher.xml
          owner: jenkins
          group: jenkins
          mode: "0644"

    # Create directory where results from slave workspaces will be copied to.
    - name: Create slave results directory
      file:
        path: "{{ jenkins_master_results_directory }}"
        state: directory
        owner: jenkins
        group: jenkins
        mode: "0700"

#######################
# Deploy Jenkins Slave
#######################
- hosts: jenkins_slave
  tags:
    - jenkins_slave
  become: yes
  roles:
    - { role: 'franklinkim.sudo' }
    - { role: 'geerlingguy.java' }

  vars_files:
    - "{{ inventory_dir  }}/../vars/main.yml"
    - ~/.ansible/vars/cira_vars.yml

  vars:
    sudo_defaults:
      - defaults: '!requiretty'
    sudo_users:
      - name: 'stack'
        nopasswd: yes

  pre_tasks:
    - name: Ensure libselinux-python is installed
      yum:
        name: libselinux-python
        state: present

    - name: Create stack user
      user:
        name: stack
        comment: "Stack Slave User"
        generate_ssh_key: yes

  tasks:
    - name: Validate Git is installed
      yum:
        name: git
        state: present

    - name: Get hostname of slave
      shell: echo $HOSTNAME
      register: jenkins_slave_ssh_hostname
      tags:
        - skip_ansible_lint
        - jenkins_ssh

########################
# Setup SSH connections
########################
- include: jenkins_ssh.yml

###############################
# Add the slaves to the master
###############################
- hosts: jenkins_master
  become: yes
  tags:
    - jenkins_slave

  vars_files:
    - ~/.ansible/vars/cira_vars.yml

  tasks:
    - name: Check if our node already exists
      command: >
        java -jar {{ jenkins_jar_location }} -s http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix | default('') }}/
        get-node {{ item }}
        --username {{ jenkins_admin_username }}
        --password {{ jenkins_admin_password }}
      ignore_errors: true
      register: jenkins_cli_get_nodes
      changed_when: false
      when: "'jenkins_slave' in groups"
      with_items:
         - "{{ groups['jenkins_slave'] }}"

    - name: Deploy template for Jenkins slave node
      template:
        src: jenkins_slave.j2
        dest: /tmp/jenkins_slave_{{ item.item }}.tmpl
      when: jenkins_cli_get_nodes is defined and "{{ item.rc }}" != 0
      with_items:
         - "{{ jenkins_cli_get_nodes.results }}"

    - name: Add Jenkins slave node to the master
      shell: >
        java -jar {{ jenkins_jar_location }} -s http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix | default('') }}/
        create-node {{ item.item }}
        --username {{ jenkins_admin_username }}
        --password {{ jenkins_admin_password }} < /tmp/jenkins_slave_{{ item.item }}.tmpl
      when: jenkins_cli_get_nodes is defined and "{{ item.rc }}" != 0
      with_items:
         - "{{ jenkins_cli_get_nodes.results }}"

    - name: Remove template for Jenkins slave node
      file:
        name: /tmp/jenkins_slave_{{ item }}.tmpl
        state: absent
      when: jenkins_cli_get_nodes is defined and "{{ item.rc }}" != 0
      with_items:
         - "{{ jenkins_cli_get_nodes.results }}"

######################
# Deploy Jenkins jobs
######################
- include: jenkins_jobs.yml
